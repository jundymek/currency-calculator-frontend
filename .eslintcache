[{"/Users/jundymek/dev/billon-currency-calculator/billon-calc-frontend/src/reportWebVitals.ts":"1","/Users/jundymek/dev/billon-currency-calculator/billon-calc-frontend/src/App.tsx":"2","/Users/jundymek/dev/billon-currency-calculator/billon-calc-frontend/src/components/calculatorForm/CalculatorForm.tsx":"3"},{"size":425,"mtime":1608330734808,"results":"4","hashOfConfig":"5"},{"size":428,"mtime":1608420326156,"results":"6","hashOfConfig":"5"},{"size":3637,"mtime":1608423308382,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18it7by",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/Users/jundymek/dev/billon-currency-calculator/billon-calc-frontend/src/reportWebVitals.ts",[],"/Users/jundymek/dev/billon-currency-calculator/billon-calc-frontend/src/App.tsx",[],"/Users/jundymek/dev/billon-currency-calculator/billon-calc-frontend/src/components/calculatorForm/CalculatorForm.tsx",["15"],"import { Button, MenuItem, Typography } from \"@material-ui/core\";\nimport { Select, TextField } from \"mui-rff\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-final-form\";\nimport styled from \"styled-components\";\n\ninterface Currences {\n  symbol: string;\n  name: string;\n}\n\ninterface Result {\n  price: number;\n  firstCurrency: string;\n  secondCurrency: string;\n  amount: string;\n  result: number;\n  date: string;\n  id: number;\n}\n\nconst StyledForm = styled.form`\n  width: 90%;\n  @media (min-width: 640px) {\n    width: 50%;\n  }\n`;\n\nconst StyledAmountField = styled(TextField)`\n  @media (min-width: 640px) {\n    && {\n      max-width: 200px;\n      margin-left: 20px;\n    }\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  && {\n    margin-top: 1rem;\n    justify-self: end;\n  }\n`;\n\nconst StyledWrapper = styled.div`\n  @media (min-width: 640px) {\n    display: flex;\n    align-items: center;\n    justify-items: between;\n  }\n`;\n\nconst CalculatorForm = React.memo(() => {\n  const [currences, setCurrences] = useState<Currences[]>([]);\n  const onSubmit = (values: any) => {\n    console.log(values);\n    console.log(currences);\n    return fetch(\"http://localhost:3001/calc\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(values),\n    })\n      .then((response) => response.json())\n      .then((result) => console.log(result))\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  const getCurrences = () => {\n    return fetch(\"http://localhost:3001/currences\").then((res) => res.json());\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const data = await getCurrences();\n      setCurrences(\n        data.sort((a: any, b: any) => {\n          return a.symbol > b.symbol ? 1 : b.symbol > a.symbol ? -1 : 0;\n        })\n      );\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\n        Currency converter\n      </Typography>\n      <Typography variant=\"h5\" align=\"center\" component=\"h2\" gutterBottom>\n        Convert any currency\n      </Typography>\n      <Form\n        onSubmit={onSubmit}\n        render={({ handleSubmit, values }) => (\n          <StyledForm onSubmit={handleSubmit}>\n            <StyledWrapper>\n              <Select name=\"firstCurrency\" label=\"From currency...\" formControlProps={{ margin: \"normal\" }}>\n                {currences.map((currency) => {\n                  return (\n                    <MenuItem key={currency.symbol} value={currency.symbol}>\n                      {currency.symbol} - {currency.name}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n              <StyledAmountField\n                label=\"Amount\"\n                type=\"number\"\n                name=\"amount\"\n                variant=\"outlined\"\n                color=\"primary\"\n                required\n              />\n            </StyledWrapper>\n            <Select name=\"secondCurrency\" label=\"To currency...\">\n              {currences\n                .filter((item) => item.symbol !== values.fromCurrency)\n                .map((currency) => {\n                  return (\n                    <MenuItem key={currency.symbol} value={currency.symbol}>\n                      {currency.symbol} - {currency.name}\n                    </MenuItem>\n                  );\n                })}\n            </Select>\n            <StyledButton variant=\"contained\" color=\"primary\" type=\"submit\">\n              Submit\n            </StyledButton>\n          </StyledForm>\n        )}\n      />\n    </>\n  );\n});\n\nexport default CalculatorForm;\n",{"ruleId":"16","severity":1,"message":"17","line":12,"column":11,"nodeType":"18","messageId":"19","endLine":12,"endColumn":17},"@typescript-eslint/no-unused-vars","'Result' is defined but never used.","Identifier","unusedVar"]